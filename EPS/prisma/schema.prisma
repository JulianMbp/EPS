// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
model Medicamento{
  id Int @id @default(autoincrement())
  nombre_medicamento String
  descripcion String
  cantidad_disponible Int
  laboratorio String
  fecha_vencimiento DateTime
  precio Float
  proveedor Proveedor[]
}
model Proveedor{
  id    Int     @id @default(autoincrement())
  medicamento Medicamento @relation(fields: [medicamentoID], references: [id])
  medicamentoID Int
  nombre String
  telefono Int?
  direccion String?
}
model factura{
  id Int @id @default(autoincrement())
  //falta paciente y empleado *Borrar cuando se cree la tabla*
  //ID_paciente Paciente @relation(fields:[pacienteID], references: [id])
  //pacienteID int
  //ID_empleado empleado @relation(fields:[empleadoID], references: [id])
  //empleadoID int
  fecha_factura DateTime?
  Total_factura Float
  forma_pago String
  descuento Float?
  Eps_cubre Boolean @default(false)
}

model Cita {
  id            Int          @id @default(autoincrement())
  paciente      String
  fecha         DateTime
  hora          String
  motivo        String
  estado        String        @default("programada")
  medico        String?       // Medico es opcional hasta que se asigne
}


model Encuesta {
  id          Int        @id @default(autoincrement())
  titulo      String
  descripcion String?
  fechaCreacion DateTime @default(now())
  completada  Boolean    @default(false)
  respuestas  Respuesta[]
  preguntas   Pregunta[]  // Relación con preguntas
}

model Respuesta {
  id          Int       @id @default(autoincrement())
  encuestaId  Int
  encuesta    Encuesta   @relation(fields: [encuestaId], references: [id])
  preguntaId  Int
  pregunta    Pregunta   @relation(fields: [preguntaId], references: [id]) // Relación con pregunta
  respuesta   String     // La respuesta del usuario
  fecha       DateTime   @default(now())
}

model Pregunta {
  id          Int        @id @default(autoincrement())
  texto       String     // El texto de la pregunta
  tipo        String     
  encuestaId  Int
  encuesta    Encuesta   @relation(fields: [encuestaId], references: [id])
  opciones    Opcion[]   // Relación con las opciones posibles
  respuestas  Respuesta[] // Relación con las respuestas
}

model Opcion {
  id        Int      @id @default(autoincrement())
  texto     String   // Texto de la opción
  preguntaId Int
  pregunta  Pregunta @relation(fields: [preguntaId], references: [id]) // Relación con pregunta
}


model Paciente {
  id        Int      @id @default(autoincrement())
  nombre    String
  apellido  String
  fecha_nac DateTime
  telefono  String?
  direccion String?
  email     String? @unique
}

model PersonalMedico {
  id        Int      @id @default(autoincrement())
  nombre    String
  apellido  String
  especialidad String
  telefono  String?
  direccion String?
  email     String? @unique
  fechaIngreso DateTime @default(now())
}
